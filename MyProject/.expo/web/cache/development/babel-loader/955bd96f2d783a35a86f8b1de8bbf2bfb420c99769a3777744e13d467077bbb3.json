{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { DatePickerIOS } from \"react-native-web/dist/index\";\nimport { TimePickerAndroid } from \"react-native-web/dist/index\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar AlarmClock = function AlarmClock() {\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    selectedTime = _useState2[0],\n    setSelectedTime = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    showPicker = _useState4[0],\n    setShowPicker = _useState4[1];\n  var showTimePicker = function () {\n    var _ref = _asyncToGenerator(function* () {\n      if (Platform.OS === 'android') {\n        try {\n          var _yield$TimePickerAndr = yield TimePickerAndroid.open({\n              is24Hour: true\n            }),\n            action = _yield$TimePickerAndr.action,\n            hour = _yield$TimePickerAndr.hour,\n            minute = _yield$TimePickerAndr.minute;\n          if (action !== TimePickerAndroid.dismissedAction) {\n            var formattedHour = hour < 10 ? \"0\" + hour : hour;\n            var formattedMinute = minute < 10 ? \"0\" + minute : minute;\n            var _selectedTime = formattedHour + \":\" + formattedMinute;\n            setSelectedTime(_selectedTime);\n          }\n        } catch (error) {\n          console.error('Error accessing TimePickerAndroid:', error);\n        }\n      } else if (Platform.OS === 'ios') {\n        setShowPicker(true);\n      } else {\n        Alert.alert('TimePicker is not supported on this platform.');\n      }\n    });\n    return function showTimePicker() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  var handleTimeChange = function handleTimeChange(date) {\n    var formattedHour = date.getHours() < 10 ? \"0\" + date.getHours() : date.getHours();\n    var formattedMinute = date.getMinutes() < 10 ? \"0\" + date.getMinutes() : date.getMinutes();\n    var selectedTime = formattedHour + \":\" + formattedMinute;\n    setSelectedTime(selectedTime);\n    setShowPicker(false);\n  };\n  return _jsxs(View, {\n    children: [_jsx(Button, {\n      title: \"Set Alarm\",\n      onPress: showTimePicker\n    }), showPicker && Platform.OS === 'ios' && _jsx(DatePickerIOS, {\n      mode: \"time\",\n      onDateChange: handleTimeChange,\n      date: selectedTime ? new Date() : null\n    })]\n  });\n};\nexport default AlarmClock;","map":{"version":3,"names":["React","useState","Platform","View","Button","Alert","DatePickerIOS","TimePickerAndroid","jsx","_jsx","jsxs","_jsxs","AlarmClock","_useState","_useState2","_slicedToArray","selectedTime","setSelectedTime","_useState3","_useState4","showPicker","setShowPicker","showTimePicker","_ref","_asyncToGenerator","OS","_yield$TimePickerAndr","open","is24Hour","action","hour","minute","dismissedAction","formattedHour","formattedMinute","error","console","alert","apply","arguments","handleTimeChange","date","getHours","getMinutes","children","title","onPress","mode","onDateChange","Date"],"sources":["/Users/zhangxinyi/Desktop/My Home/code/MyProject/components/AlarmClock.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Platform, View, Button, Alert, DatePickerIOS, TimePickerAndroid } from 'react-native';\n\nconst AlarmClock = () => {\n  const [selectedTime, setSelectedTime] = useState(null);\n  const [showPicker, setShowPicker] = useState(false);\n\n  const showTimePicker = async () => {\n    if (Platform.OS === 'android') {\n      try {\n        const { action, hour, minute } = await TimePickerAndroid.open({\n          is24Hour: true,\n        });\n\n        if (action !== TimePickerAndroid.dismissedAction) {\n          const formattedHour = hour < 10 ? `0${hour}` : hour;\n          const formattedMinute = minute < 10 ? `0${minute}` : minute;\n          const selectedTime = `${formattedHour}:${formattedMinute}`;\n          setSelectedTime(selectedTime);\n        }\n      } catch (error) {\n        console.error('Error accessing TimePickerAndroid:', error);\n      }\n    } else if (Platform.OS === 'ios') {\n      setShowPicker(true);\n    } else {\n      // Handle unsupported platforms\n      Alert.alert('TimePicker is not supported on this platform.');\n    }\n  };\n\n  const handleTimeChange = (date) => {\n    const formattedHour = date.getHours() < 10 ? `0${date.getHours()}` : date.getHours();\n    const formattedMinute = date.getMinutes() < 10 ? `0${date.getMinutes()}` : date.getMinutes();\n    const selectedTime = `${formattedHour}:${formattedMinute}`;\n    setSelectedTime(selectedTime);\n    setShowPicker(false);\n  };\n\n  return (\n    <View>\n      <Button title=\"Set Alarm\" onPress={showTimePicker} />\n      {showPicker && Platform.OS === 'ios' && (\n        <DatePickerIOS\n          mode=\"time\"\n          onDateChange={handleTimeChange}\n          date={selectedTime ? new Date() : null}\n        />\n      )}\n      {/* Rest of your code */}\n    </View>\n  );\n};\n\nexport default AlarmClock;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}