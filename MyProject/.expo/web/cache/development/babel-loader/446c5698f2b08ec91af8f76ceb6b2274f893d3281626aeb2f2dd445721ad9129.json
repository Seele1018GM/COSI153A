{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport DateTimePicker from '@react-native-community/datetimepicker';\nimport * as Notifications from 'expo-notifications';\nimport Constants from 'expo-constants';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar AlarmClock = function AlarmClock() {\n  var _useState = useState(new Date()),\n    _useState2 = _slicedToArray(_useState, 2),\n    selectedTime = _useState2[0],\n    setSelectedTime = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    showTimePicker = _useState4[0],\n    setShowTimePicker = _useState4[1];\n  useEffect(function () {\n    var getNotificationPermissions = function () {\n      var _ref = _asyncToGenerator(function* () {\n        var _yield$Notifications$ = yield Notifications.getPermissionsAsync(),\n          existingStatus = _yield$Notifications$.status;\n        var finalStatus = existingStatus;\n        if (existingStatus !== 'granted') {\n          var _yield$Notifications$2 = yield Notifications.requestPermissionsAsync(),\n            status = _yield$Notifications$2.status;\n          finalStatus = status;\n        }\n        if (finalStatus !== 'granted') {\n          console.log('Permission to receive notifications was denied.');\n        }\n      });\n      return function getNotificationPermissions() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    getNotificationPermissions();\n  }, []);\n  var handleTimeChange = function handleTimeChange(event, time) {\n    if (time) {\n      setSelectedTime(time);\n      setShowTimePicker(false);\n      scheduleNotification(time);\n    }\n  };\n  var scheduleNotification = function () {\n    var _ref2 = _asyncToGenerator(function* (time) {\n      try {\n        var hour = time.hour,\n          minute = time.minute;\n        var alarmTime = new Date();\n        alarmTime.setHours(hour);\n        alarmTime.setMinutes(minute);\n        alarmTime.setSeconds(0);\n        yield Notifications.scheduleNotificationAsync({\n          content: {\n            title: 'Alarm',\n            body: 'Wake up! It\\'s time.'\n          },\n          trigger: {\n            date: alarmTime\n          }\n        });\n        console.log('Alarm set successfully.');\n      } catch (error) {\n        console.log('Error setting the alarm:', error);\n      }\n    });\n    return function scheduleNotification(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var showPicker = function showPicker() {\n    setShowTimePicker(true);\n  };\n  return _jsxs(View, {\n    children: [_jsx(Button, {\n      title: \"Set Alarm\",\n      onPress: showPicker\n    }), showTimePicker && _jsx(DateTimePicker, {\n      value: selectedTime,\n      mode: \"time\",\n      display: Platform.OS === 'ios' ? 'spinner' : 'default',\n      onChange: handleTimeChange\n    })]\n  });\n};\nexport default AlarmClock;","map":{"version":3,"names":["React","useState","useEffect","View","Button","Platform","DateTimePicker","Notifications","Constants","jsx","_jsx","jsxs","_jsxs","AlarmClock","_useState","Date","_useState2","_slicedToArray","selectedTime","setSelectedTime","_useState3","_useState4","showTimePicker","setShowTimePicker","getNotificationPermissions","_ref","_asyncToGenerator","_yield$Notifications$","getPermissionsAsync","existingStatus","status","finalStatus","_yield$Notifications$2","requestPermissionsAsync","console","log","apply","arguments","handleTimeChange","event","time","scheduleNotification","_ref2","hour","minute","alarmTime","setHours","setMinutes","setSeconds","scheduleNotificationAsync","content","title","body","trigger","date","error","_x","showPicker","children","onPress","value","mode","display","OS","onChange"],"sources":["/Users/zhangxinyi/Desktop/My Home/code/MyProject/components/AlarmClock.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { View, Button, Platform } from 'react-native';\nimport DateTimePicker from '@react-native-community/datetimepicker';\nimport * as Notifications from 'expo-notifications';\nimport Constants from 'expo-constants';\n\nconst AlarmClock = () => {\n  const [selectedTime, setSelectedTime] = useState(new Date());\n  const [showTimePicker, setShowTimePicker] = useState(false);\n\n  useEffect(() => {\n    // Request permissions for notifications\n    const getNotificationPermissions = async () => {\n      const { status: existingStatus } = await Notifications.getPermissionsAsync();\n      let finalStatus = existingStatus;\n\n      // Only ask for permission if it hasn't been granted yet\n      if (existingStatus !== 'granted') {\n        const { status } = await Notifications.requestPermissionsAsync();\n        finalStatus = status;\n      }\n\n      // If permission is not granted, handle it accordingly\n      if (finalStatus !== 'granted') {\n        // Display an error message or take necessary action\n        console.log('Permission to receive notifications was denied.');\n      }\n    };\n\n    getNotificationPermissions();\n  }, []);\n\n  const handleTimeChange = (event, time) => {\n    if (time) {\n      setSelectedTime(time);\n      setShowTimePicker(false);\n      scheduleNotification(time);\n    }\n  };\n\n  const scheduleNotification = async (time) => {\n    try {\n      const { hour, minute } = time;\n      const alarmTime = new Date();\n      alarmTime.setHours(hour);\n      alarmTime.setMinutes(minute);\n      alarmTime.setSeconds(0);\n\n      // Schedule the notification\n      await Notifications.scheduleNotificationAsync({\n        content: {\n          title: 'Alarm',\n          body: 'Wake up! It\\'s time.',\n        },\n        trigger: { date: alarmTime },\n      });\n\n      // Display a success message or take necessary action\n      console.log('Alarm set successfully.');\n    } catch (error) {\n      // Display an error message or take necessary action\n      console.log('Error setting the alarm:', error);\n    }\n  };\n\n  const showPicker = () => {\n    setShowTimePicker(true);\n  };\n\n  return (\n    <View>\n      <Button title=\"Set Alarm\" onPress={showPicker} />\n      {showTimePicker && (\n        <DateTimePicker\n          value={selectedTime}\n          mode=\"time\"\n          display={Platform.OS === 'ios' ? 'spinner' : 'default'}\n          onChange={handleTimeChange}\n        />\n      )}\n    </View>\n  );\n};\n\nexport default AlarmClock;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}