{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport React, { useState, useEffect } from 'react';\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Vibration from \"react-native-web/dist/exports/Vibration\";\nimport axios from 'axios';\nimport open_api_key from \"./open_api_key\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar AskGPT = function AskGPT() {\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    data = _useState2[0],\n    setData = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    promptText = _useState4[0],\n    setPromptText = _useState4[1];\n  var _useState5 = useState(),\n    _useState6 = _slicedToArray(_useState5, 2),\n    prompt = _useState6[0],\n    setPrompt = _useState6[1];\n  var _useState7 = useState(true),\n    _useState8 = _slicedToArray(_useState7, 2),\n    loading = _useState8[0],\n    setLoading = _useState8[1];\n  var _useState9 = useState(0),\n    _useState10 = _slicedToArray(_useState9, 2),\n    retryCount = _useState10[0],\n    setRetryCount = _useState10[1];\n  var maxRetryAttempts = 3;\n  var retryDelay = 5000;\n  var getResponse = function () {\n    var _ref = _asyncToGenerator(function* () {\n      try {\n        var url = 'https://api.openai.com/v1/chat/completions';\n        var config = {\n          headers: {\n            Accept: 'application/json, text/plain, */*',\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + open_api_key\n          }\n        };\n        var msg_data = {\n          model: 'gpt-3.5-turbo',\n          messages: [{\n            role: 'user',\n            content: prompt\n          }],\n          temperature: 0.7\n        };\n        var response = yield axios.post(url, msg_data, config);\n        var result = response.data;\n        setLoading(false);\n        setData(result);\n        setRetryCount(0);\n      } catch (error) {\n        var _error$response;\n        console.error(error);\n        if (((_error$response = error.response) == null ? void 0 : _error$response.status) === 429) {\n          if (retryCount < maxRetryAttempts) {\n            setTimeout(function () {\n              setRetryCount(retryCount + 1);\n              getResponse();\n            }, retryDelay);\n          } else {\n            console.log('Maximum retry attempts reached');\n            setLoading(false);\n          }\n        } else {\n          setLoading(false);\n        }\n      } finally {\n        setLoading(false);\n      }\n    });\n    return function getResponse() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  useEffect(function () {\n    getResponse();\n  }, [prompt]);\n  var ChatResponse = function ChatResponse(_ref2) {\n    var role = _ref2.role,\n      content = _ref2.content;\n    return _jsxs(View, {\n      style: {\n        backgroundColor: 'lightblue',\n        margin: 10,\n        padding: 20\n      },\n      children: [_jsx(Text, {\n        children: \"ChatGPT Response to the prompt is:\"\n      }), \"Vibration.Vi\", _jsx(Text, {\n        style: {\n          backgroundColor: 'white'\n        },\n        children: content\n      })]\n    });\n  };\n  return _jsxs(SafeAreaView, {\n    style: {\n      flex: 1,\n      fontSize: 24,\n      margin: 30\n    },\n    children: [_jsx(Text, {\n      style: {\n        marginTop: 30\n      },\n      children: \"Prompt: \"\n    }), _jsx(TextInput, {\n      style: {\n        height: 40,\n        borderColor: 'gray',\n        borderWidth: 1,\n        padding: 10,\n        margin: 10\n      },\n      onChangeText: function onChangeText(text) {\n        return setPromptText(text);\n      },\n      value: promptText\n    }), _jsx(Button, {\n      onPress: function onPress() {\n        setLoading(true);\n        setData([]);\n        setPrompt(promptText);\n      },\n      title: loading ? 'Awaiting Response' : 'Ask GPT',\n      color: \"#841584\",\n      accessibilityLabel: \"Send\"\n    }), _jsx(FlatList, {\n      data: data.choices,\n      keyExtractor: function keyExtractor(_, index) {\n        return index.toString();\n      },\n      renderItem: function renderItem(_ref3) {\n        var item = _ref3.item;\n        return _jsx(ChatResponse, _objectSpread({}, item.message));\n      }\n    })]\n  });\n};\nexport default AskGPT;","map":{"version":3,"names":["React","useState","useEffect","SafeAreaView","Text","TextInput","Button","FlatList","View","Vibration","axios","open_api_key","jsx","_jsx","jsxs","_jsxs","AskGPT","_useState","_useState2","_slicedToArray","data","setData","_useState3","_useState4","promptText","setPromptText","_useState5","_useState6","prompt","setPrompt","_useState7","_useState8","loading","setLoading","_useState9","_useState10","retryCount","setRetryCount","maxRetryAttempts","retryDelay","getResponse","_ref","_asyncToGenerator","url","config","headers","Accept","Authorization","msg_data","model","messages","role","content","temperature","response","post","result","error","_error$response","console","status","setTimeout","log","apply","arguments","ChatResponse","_ref2","style","backgroundColor","margin","padding","children","flex","fontSize","marginTop","height","borderColor","borderWidth","onChangeText","text","value","onPress","title","color","accessibilityLabel","choices","keyExtractor","_","index","toString","renderItem","_ref3","item","_objectSpread","message"],"sources":["/Users/zhangxinyi/Desktop/My Home/code/MyProject/components/AskGPT.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { SafeAreaView, Text, TextInput, Button, FlatList, View, Vibration } from 'react-native';\nimport axios from 'axios';\nimport open_api_key from './open_api_key';\n\nconst AskGPT = () => {\n  const [data, setData] = useState([]);\n  const [promptText, setPromptText] = useState('');\n  const [prompt, setPrompt] = useState();\n  const [loading, setLoading] = useState(true);\n  const [retryCount, setRetryCount] = useState(0);\n  const maxRetryAttempts = 3;\n  const retryDelay = 5000; // Delay in milliseconds between retries\n\n  const getResponse = async () => {\n    try {\n      const url = 'https://api.openai.com/v1/chat/completions';\n      const config = {\n        headers: {\n          Accept: 'application/json, text/plain, */*',\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + open_api_key,\n        },\n      };\n      const msg_data = {\n        model: 'gpt-3.5-turbo',\n        messages: [{ role: 'user', content: prompt }],\n        temperature: 0.7,\n      };\n      const response = await axios.post(url, msg_data, config);\n      const result = response.data;\n      setLoading(false);\n      setData(result);\n      setRetryCount(0); // Reset the retry count on successful response\n    } catch (error) {\n      console.error(error);\n      if (error.response?.status === 429) {\n        if (retryCount < maxRetryAttempts) {\n          // Retry the request after a delay\n          setTimeout(() => {\n            setRetryCount(retryCount + 1);\n            getResponse();\n          }, retryDelay);\n        } else {\n          // Reached maximum retry attempts\n          console.log('Maximum retry attempts reached');\n          setLoading(false);\n        }\n      } else {\n        // Other error occurred\n        setLoading(false);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    getResponse();\n  }, [prompt]);\n\n  const ChatResponse = ({ role, content }) => (\n    <View style={{ backgroundColor: 'lightblue', margin: 10, padding: 20 }}>\n      <Text>ChatGPT Response to the prompt is:</Text>\n      Vibration.Vi\n      <Text style={{ backgroundColor: 'white' }}>{content}</Text>\n    </View>\n  );\n\n  return (\n    <SafeAreaView style={{ flex: 1, fontSize: 24, margin: 30 }}>\n\n      <Text style={{ marginTop: 30 }}>Prompt: </Text>\n      <TextInput\n        style={{ height: 40, borderColor: 'gray', borderWidth: 1, padding: 10, margin: 10 }}\n        onChangeText={(text) => setPromptText(text)}\n        value={promptText}\n      />\n\n      <Button\n        onPress={() => {\n          setLoading(true);\n          setData([]);\n          setPrompt(promptText);\n        }}\n        title={loading ? 'Awaiting Response' : 'Ask GPT'}\n        color=\"#841584\"\n        accessibilityLabel=\"Send\"\n      />\n\n      <FlatList\n        data={data.choices}\n        keyExtractor={(_, index) => index.toString()}\n        renderItem={({ item }) => <ChatResponse {...item.message} />}\n      />\n    </SafeAreaView>\n  );\n};\n\nexport default AskGPT;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}